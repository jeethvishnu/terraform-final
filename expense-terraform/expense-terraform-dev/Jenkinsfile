pipeline {
    agent {
        label 'agent-11'
    }

    options {
        timeout(time:15, unit:'MINUTES')
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    parameters {
        choice(name: 'choose', choices: ['apply', 'destroy'], description: 'Pick something')
    }

    stages {
        stage('init') {
            steps {
                sh '''
                    cd expense-terraform
                    cd expense-terraform-dev
                    cd 01-vpc
                    terraform init -reconfigure
                '''
            }
        }
        stage('plan') {
            when {
                expression {params.choose == 'apply'}
            }
            steps {
                sh '''
                    cd expense-terraform
                    cd expense-terraform-dev
                    cd 01-vpc
                    terraform plan
                '''
            }
        }
        stage('deploy') {
            when {
                expression {params.choose == 'apply'}
            }
            input {
                message "Should we continue?"
                ok "Yes, we should."
            }
            steps {
                sh '''
                    cd expense-terraform
                    cd expense-terraform-dev
                    cd 01-vpc
                    terraform apply -auto-approve
                '''
            }
        }
        stage('destroy') {
            when {
                expression {params.choose == 'destroy'}
            }
          
            steps {
                sh '''
                    cd expense-terraform
                    cd expense-terraform-dev
                    cd 01-vpc
                    terraform destroy -auto-approve
                '''
            }
        }
    }

    post {
        success {
            echo 'will run if success'
        }
        always {
            echo 'will run always'
            deleteDir()
        }
        failure {
            echo 'will run if failed'
        }
    }
}